#### Documentation
You do not need to use all these parameters, but specificity can help with code output if you encounter problems.

- `type`: The type of request (e.g., `explain`, `code`, `compare`, `optimize`, `debug`).
	- `explain` A request to explain a `topic` or `code`.
	- `code` A request to generate code from a `topic` in a `language`.
	- `compare` A request to compare multiple or singular `topic`s across multiple `language`s  or `code` snippets.
	- `optimize` A request to make `code` more performant.
	- `debug` A request to solve an `issue` of `code`.
- `topic`: The specific topic or concept under discussion.
- `language`: Programming language for `compare` or `code`.
- `code`: The code snippet you want to discuss. This has many sub-parameters.
	- `context`: The `code` itself (e.g. `string HelloWorld = "Hello World!"`).
	- `components`: Denotes the sections to be generated.
 	- `classes`: Holds the class(es) to be generated.
	- `functions`: Holds the function(es) to be generated.
	- `variables`: Holds the variable(s) to be generated.
	- `architectural`: This is a way to structure `code`.
		- `pattern`: The specifics of implementing the sub-designs for `code` implementation (e.g. `MCV`).
		- `components`:  The main parts of this architectural pattern (e.g. `Model`, `View`, `Controller`).
		- `concurrency`: The multi-threaded paradigm to implement throughout the `code` (e.g. `active_object`, `barrier`, `read_write_lock`).
		- `relations`: A text description of the relationship(s) between the components.
		- `designs`: Holds multiple design patterns for `code` implementation.
			- `pattern`: The specifics of implementing code by a design pattern (e.g. `factory`, `observer`, `adapter`, `flyweight`, `facade`).
			- `components`: The `classes`, `functions`, and or `variables` for the `pattern` to use.
			- `relations`: A text description of the relationship(s) between the components.
- `style`: Holds specifics for `code`.
	- `naming`: Hold specifies for `code` naming conventions (e.g. `snake_case`, `camelCase`, `PascalCase`).
		- `variables`: The way a variable is named.
		- `functions`: The way a function is named.
		- `classes`: The way a class is named.
	- `indentation_and_spacing`: Holds specifies for `code` formating.
		- `indent_size`: The indent size in spaces. If this is only present this will imply it's use.
		- `tab_width`: The indent size in tabs. If this is only present this will imply it's use.
		- `use_tabs`: If `true`, `code` will use tabs instead of spaces.
	- `braces`:  Specifies the bracing format in `code`.
	- `init`: Specifies if `variables` should have a starting value when created.
	- `header`: Specifies the top reference's, (e.g. `#include`, `import`), ordering (e.g. `alphabetical`, `system_project`, `project_system`).
- `comments`: The absence of this is to not have comments in `code` generation. If it is present style of a comment can be specified (e.g. `single_line`, `multi_line`).
- `issue`: Description of the issue for `debug`.
- `doc_format`: Specifies documentation format for `code` (e.g. `Doxygen`, `MkDocs`, `YARD`).
